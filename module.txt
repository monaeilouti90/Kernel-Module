
#include <linux/module.h>
#include <linux/sched.h>
#include <linux/kernel.h>
#include <asm/uaccess.h>
#include <linux/fs.h>
#include <linux/string.h>
#include <linux/proc_fs.h>

static int d_open(struct inode *, struct file *);
static int rls(struct inode *, struct file *);
static ssize_t d_read(struct file *, char *, size_t, loff_t *);

int leng,temp;
char msg[3000]; 
int totalLen;

static struct file_operations fops =
{
    .read = d_read
    .open = d_open
    .release = rls,
};

int init_module(void)
{
    int t = register_chrdev(101,"theprocs",&fops);
    if(t<0) printk(KERN_ALERT "Failed to register \n");
    else printk(KERN_ALERT "Successfully registered \n");
    return t;
}

static int d_open(struct inode *inod, struct file *fil)
{
    struct task_struct *task;   
    for_each_process(task)
    {
        printk("%s [%d]\n",task->comm, task->pid);
       
        strcat(&msg[0],task->comm);
        strcat(&msg[0],"\n");
 
        totalLen = totalLen + strlen(task->comm);      
    }
    strcat(&msg[0],"\0");
    leng=strlen(msg);
    temp=leng;
    printk("%s [%d]\n",task->comm , totalLen);

   return 0;
}

void cleanup_module(void)
{
    unregister_chrdev(101,"theprocs");
}

static ssize_t d_read(struct file *filp,char *buf,size_t count,loff_t *offp)
{
   
    if(count>temp)
    {
        count=temp;
    }
    temp=temp-count;
    copy_to_user(buf,msg, count);
    if(count==0)
        temp=leng;

    return count;
}


static int rls(struct inode *inod, struct file *fil)
{
    printk(KERN_ALERT"Done\n");
    return 0;
}